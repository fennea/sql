# This is a file of all my learned SQL code. This will help me if I ever forget.


# Pulling from table
SELECT * FROM table_name;
SELECT column1, Column2, ... FROM table_name;

# Renaming column while pulling data
SELECT column AS 'New column name' FROM table_name;
#Ex: SELECT id AS '#', special_instructions AS 'Notes' FROM orders WHERE special_instructions IS NOT NULL AND special_instructions LIKE '%box%' ORDER BY special_instructions ASC LIMIT 20;

# cleaning repetitive data using distinct
SELECT DISTINCT column FROM table_name;
# Ex: SELECT DISTINCT name FROM babies WHERE name LIKE 'S%' LIMIT 20;

THE FOLLOWING CODE IS FOR USING THE WHERE COMMAND:

# cleaning data using comparison operators (=, !=, >, <, <=, >=)
SELECT * FROM table_name WHERE column > control_number; 
# SELECT * FROM movies WHERE year > 2014

# Pulling data when you have some info about the data within a column.
SELECT * FROM table_name WHERE column LIKE 'unique_info_goes_here';
# "_" means you can substitute any individual character here wihtout breaking the pattern
# USING LIKE: A special operator that can be used with the WHERE clause to search for a pattern.
SELECT * FROM table_name WHERE column LIKE '%unigue_info%';

# _ is any character, [0-9] is any number between 0 and 9.
# EX: SELECT Name, ListPrice FROM SalesLT.Product WHERE ProductNumber LIKE 'FR-_[0-9][0-9]_-[0-9][0-9]';

# You can use the "%" in any way as it really means there is unknown data either before or after the percent sign.
# EX:  SELECT * FROM nomnom WHERE name LIKE '%meatball%';

# NULL happens in SQL, and I want to work with NULL, such as removing it or keeping it. NULL IS WHEN THE FIELD IS EMPTY
# IS NULL, IS NOT NULL
SELECT column[j] FROM table_name WHERE column[i] IS NOT NULL; # Ex: SELECT name FROM movies WHERE imdb_rating IS NOT NULL;
#EX:  SELECT * FROM nomnom WHERE health IS NULL;

# Using BETWEEN, Letter upper threashold is not <= but rather <. Numbers upper threashold is <= not <. 
SELECT * FROM table_name WHERE column BETWEEN 'lower_threashold' AND 'upper_threashold';
  #ex: SELECT * FROM movies WHERE name BETWEEN 'D' AND 'G'; # When you want between D and F
  #ex: SELECT * FROM movies WHERE year BETWEEN 1970 AND 1979; : When you want between 1970 and 1979

# As things get more complicated, switching to multiline code

# Using AND
SELECT *  
FROM table_name
WHERE column BETWEEN lower_threashold and upper_threashold
  AND column[i] = 'unique_info';
# SELECT * FROM nomnom WHERE cuisine = 'Italian' and price = '$$$';
  
#SELECT * FROM movies WHERE year < 1994 AND genre = 'horror';
  
# Using OR
SELECT * FROM table_name WHERE column [operator] argument OR column [operator] argument;
# EX: SELECT * FROM movies WHERE genre = 'romance' or genre = 'comedy';

# Using IN
# IN is a way to say within
SELECT * FROM table_name WHERE column IN (5,6,7) AND column2 IS NULL


THE FOLLOWING CODE IS FOR SORTING DATA:
# When using ORDER BY, there are two ways to sort: Ascending [ASC] and Decending [DESC]. Naturally SQL Uses Ascending.
# ORDER BY always comes after WHERE when WHERE is used.
SELECT * FROM table_name ORDER BY column;
# EX: SELECT * FROM movies WHERE imdb_rating > 8 ORDER BY year DESC;

#When using large quantities of data, it is important to use a limit to prevent seeing thousands of items at once.
# LIMIT goes at the end of the query;
SELECT * FROM table_name LIMIT [number];
# EX: SELECT * FROM movies ORDER BY imdb_rating DESC LIMIT 3;
# EX: SELECT name, gender, number FROM babies WHERE year = 1880 ORDER BY number DESC LIMIT 10;

# Using CASE is like IF/ELSE in Python. Here we can try and separate our output into difference categories based on logic.
# I will use CASE, WHEN [equivalent to if] [and THEN], ELSE, and END. You can also rename the CASE using AS at the end.
SELECT column,
    CASE
        WHEN argument THEN answer
	ELSE answer
    END
FROM table_name;
#Example:
#SELECT name,
 #CASE
  #WHEN imdb_rating > 8 THEN 'Fantastic'
  #WHEN imdb_rating > 6 THEN 'Poorly Received'
  #ELSE 'Avoid at All Costs'
 #END AS 'Review'
#FROM movies;

# OFFSET IS NEW!
SELECT Name FROM SalesLT.Product
ORDER BY Weight DESC
-- offset 10 rows and get the next 100
OFFSET 10 ROWS FETCH NEXT 100 ROWS ONLY;
